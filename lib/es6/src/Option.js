// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Array$Std from "./Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function toResult(o, e) {
  if (o !== undefined) {
    return {
            TAG: /* Ok */0,
            _0: Caml_option.valFromOption(o)
          };
  } else {
    return {
            TAG: /* Error */1,
            _0: e
          };
  }
}

function flat(o) {
  if (o === undefined) {
    return ;
  }
  var v = Caml_option.valFromOption(o);
  if (v !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(v));
  }
  
}

function fold(o, f) {
  if (o !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(o));
  } else {
    return Caml_option.some(Curry._1(f, undefined));
  }
}

function flatFold(r, f) {
  if (r !== undefined) {
    return Caml_option.valFromOption(r);
  } else {
    return Curry._1(f, undefined);
  }
}

function seq(a) {
  return Array$Std.reduce(a, (function (a, o) {
                if (a !== undefined && o !== undefined) {
                  return Array$Std.concat(a, [Caml_option.valFromOption(o)]);
                }
                
              }), []);
}

function seq2(param) {
  var o2 = param[1];
  var o1 = param[0];
  if (o1 !== undefined && o2 !== undefined) {
    return [
            Caml_option.valFromOption(o1),
            Caml_option.valFromOption(o2)
          ];
  }
  
}

function seq3(param) {
  var o3 = param[2];
  var o2 = param[1];
  var o1 = param[0];
  if (o1 !== undefined && o2 !== undefined && o3 !== undefined) {
    return [
            Caml_option.valFromOption(o1),
            Caml_option.valFromOption(o2),
            Caml_option.valFromOption(o3)
          ];
  }
  
}

function seq4(param) {
  var o4 = param[3];
  var o3 = param[2];
  var o2 = param[1];
  var o1 = param[0];
  if (o1 !== undefined && o2 !== undefined && o3 !== undefined && o4 !== undefined) {
    return [
            Caml_option.valFromOption(o1),
            Caml_option.valFromOption(o2),
            Caml_option.valFromOption(o3),
            Caml_option.valFromOption(o4)
          ];
  }
  
}

var isSome = Belt_Option.isSome;

var isNone = Belt_Option.isNone;

var map = Belt_Option.map;

var flatMap = Belt_Option.flatMap;

export {
  toResult ,
  isSome ,
  isNone ,
  map ,
  flatMap ,
  flat ,
  fold ,
  flatFold ,
  seq ,
  seq2 ,
  seq3 ,
  seq4 ,
  
}
/* No side effect */
