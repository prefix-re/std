// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Int$Std from "./Int.js";
import * as Array$Std from "./Array.js";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Console$Std from "./Console.js";

function to(prim) {
  return Promise.resolve(prim);
}

function reject(prim) {
  return Promise.reject(prim);
}

function mapError(a, fn) {
  return a.catch(Curry.__1(fn));
}

function flatMapError(a, fn) {
  return a.catch(function (e) {
              return Promise.resolve(Curry._1(fn, e));
            });
}

function exitError(a) {
  return a.catch(function (e) {
              Console$Std.log("Error: " + e.toString());
              return Pervasives.exit(1);
            });
}

function map(a, fn) {
  return a.then(function (v) {
              return Promise.resolve(Curry._1(fn, v));
            });
}

function flatMap(a, fn) {
  return a.then(Curry.__1(fn));
}

function sleep(a, ms) {
  return a.then(function (res) {
              return new Promise((function (resolve) {
                            setTimeout((function (param) {
                                    return Curry._1(resolve, res);
                                  }), ms);
                            
                          }));
            });
}

function pool(tasks, count) {
  var curTasks = Promise.all(Array$Std.map(Array$Std.slice(tasks, 0, count), (function (f) {
              return new Promise((function (resolve) {
                            return Curry._1(resolve, Curry._1(f, undefined));
                          }));
            })));
  var rest = Array$Std.slice(tasks, count, Array$Std.length(tasks) - count | 0);
  Console$Std.log("pool: " + Int$Std.toString(Array$Std.length(rest)));
  var match = Array$Std.length(rest);
  if (match !== 0) {
    return curTasks.then(function (res1) {
                return map(pool(rest, count), (function (res2) {
                              return Array$Std.flat([
                                          res1,
                                          res2
                                        ]);
                            }));
              });
  } else {
    return curTasks;
  }
}

export {
  to ,
  reject ,
  mapError ,
  flatMapError ,
  exitError ,
  map ,
  flatMap ,
  sleep ,
  pool ,
  
}
/* No side effect */
